/*

 **Java의 상속** 
  : 기존 클래스의 변수(데이터)와 메소드(로직,코드)를 물려받아 새로운 클래스를 구성하는 것.
  
  부모 클래스, 슈퍼 클래스 ---(재사용 + 추가기능)---> 자식 클래스, 서브 클래스 
  
  *장점
  1) 기존 클래스의 변수와 코드를 재사용
  --> 코드의 중복 감소, 클래스 간결화
  
  2) 먼저 작성된 검증된 프로그램을 재사용
  --> 신뢰성 있는 프로그램 손쉽게 개발
  
  3) 클래스간 계층적 분류 및 관리
  --> 유지보수 용이
  
  class 서브클래스 extends 슈퍼클래스
  
  
  *Java 상속의 특징
  1) 다중상속을 지원하지 않는다.(반드시 한개의 부모클래스, 자식 클래스는 여러개 가능)
  2) 상속의 횟수에 제한을 두지 않는다.
  3) 모든 클래스는 java.lang.Object(최상위 클래스)를 상속받는다.
  

  *메소드 오버라이딩(method overriding)
   : 상속이 전제되어있어야 한다.
   :(시험문제) 부모 클래스가 가지고 있는 메소드의 틀(리턴타입, 메소드명, 매개변서)을
	 그대로 가지고 와서 {} 안쪽의 로직만 **재정의**하는 기법
	
  오버라이딩 - 재정의
  오버로딩 - 중복정의
  
  Casting(캐스팅)
  : 기존 데이터 타입을 다른 데이터타입으로 변환하는 것
  
  Primitive Type : 데이터 공간의 크기(자동 형변환, 강제 형변환)
  Reference Type : 객채 내 필드, 메소드의 접근 권한에 따라 가능(업캐스팅, 다운캐스팅(강제형변환)) 
  
  UpCasting(업캐스팅) - 자동 형변환
  : 객체에서의 형변환은 상속이 전제되어 있어야한다. 
    1) 하위 클래스가 상위 클래스 타입으로 자동 타입 변화하는 것(다형성)
    2) 객체 내 모든 변수, 메소드에 접근할 수 없고 상위 클래스의 변수, 메소드에만 접근 가능
    3) 단, 하위 클래스가 상위 클래스의 메소드를 오버라이딩한 경우 하위 클래스의 메소드를 호출
     
     
  DownCasting(업캐스팅) - 강제 형변환
  : 업캐스팅 된 객체를 강제(명시적)타입 변환으로 다시 되돌리는 것
    1) 업캐스팅 된 객체가 아니더라도 문법적인 오류는 없지만, 실행후 compile시 문제가 발생한다
    ex) Child c = (Child) new Parent
    2) DownCasting(다운캐스팅)
       : 부모 클래스가 자식 클래스로 강제 형변환
         Child c2 = (Child) new Parent();
		 코드에서 빨간줄이 뜬다 == Syntax Error(구문 오류)
		 Exception 발생
		 : 구문 오류는 없으나 실행했을 때 예외상황이 발생하는 것
		 : 자바 책 153page 참고
		
		
    3) DownCastiog(다운캐스팅)
	   : 업캐스팅된 객체를 강제 형변환으로 본래의 자료형태로 되돌려 놓는 것
	   전제조건 : 업캐스팅 된 객체만 다운캐스팅이 가능하다
	   Child c2 = (Child)p2;
	   c2.makeKimchi();
	   ---> 본래 자신이 가지고 있던 메소드를 사용할 수 있음
	   
	   
    *추상화
    1) 클래스 간의 공통점을 찾아내서 공통의 조상을 만드는 작업
    2) 상속계층도를 따라 올라갈수록 클래스의 추상화는 더욱 심화된다
    3) 선언되어 있으나 구현되어 있지 않은 메소드(중괄호가 없는 메소드) - 추상메소드 정의
    4) abstract 키워드를 사용하여 선언
    5) 추상 메소도는 서브 클래서(자식클래서)에서 오버라이딩 필수
    6) 추상메소드를 가지고 있는 클래스는 반드시 추상클래스가 되어야한다.
    
    *구체화
    1) 상속을 통해 클래스를 구현, 확장하는 작업
    2) 상속 계층도를 따라 내려올수록 클래스는 더 구체적이다.	   
	  
 	
	*접근제한자 (public >> protected >> default >> private)
	 : 클래스 변수와 메소드를 외부(다른클래스)에서 접근할 수 있는 범위를 지정
	 1) public - 모든 클래스에서 접근 가능
	 2) protected - 상속 관계에 있거나, 같은 패키지에 있는 클래스만 접근 가능
	 3) default(package) - 같은 package에 있는 클래스만 접근 가능
	 4) private - 외부 클래스 접근 불가(자신의 클래스에서만 가능)
	 
	 
	 *추상클래스
	 WHY? 구현의 강제성, 개발자들끼리의 규약
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */
