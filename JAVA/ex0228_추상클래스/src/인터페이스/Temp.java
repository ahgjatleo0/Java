package 인터페이스;

public interface Temp {
	
	
	/* 인터페이스란?
	 : 클래스들이 공통으로 구현해야하는 기능들을 정의
	 : 프로젝트 설계도면 or 작업명세서(지켜야하는 규칙)
	
	 인터페이스의 특징
	 1) 필드에 들어갈 수 있는 데이터는 반드시 상수여야한다.
	 2) static(정적인, 고정적인 공간)
	    ---> static 키워드가 있는 필드만 선언 가능하다.
	    ---> 실행했을때 1순위로 실행되는 저장공간
	 3) static과 final 키워드 생략 가능(무조건 static, final이어야 하기 때문)
	 4) 추상메소드만 가질 수 있다
	 5) 메소드 선언 시 abstract 키워드 생략이 가능하다(무조건 추상메소드이기 때문)
	 6) 접근제한자 protected 사용이 불가능하다.
	 7) implements 키워드를 사용해서 상속 받을 수 있다.
	 8) 인터페이스는 다중상속 가능하다.
	 
	 
	       <인터페이스>                vs         <추상클래스>
	   Has - a ~을 할 수 있는                    Is -a " ~이다"    
	 • 특정 메소드 강제 구현                • 클래스들 사이에 동일한 코드 사용
	 • 다중 구현 상속을 사용하고 싶은 경우      • 다양한 접근제한자를 사용하고 싶은 경우
	 • 관련 없는 클래스들이 특정 interface를  • 객체의 상태를 저장, 수정하고 싶은 경우
	   구현받아 하고 싶은 경우 
	   
	 =====> 해당 크랠스의 구분을 추상클래스 상속을 통해 해결하고, 할 수 있는 기능들을 인터페이스로 구현
	 
	 */
	 
	
	// 1. 필드
	int num = 0;
	
	
	// 2. 메소드
	public void temp();
	
	// Java 7버전 이후
	// ---> default, static 키워드가 있으면 일반 메소드 선언 가능
	static void temp2() {
		
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
